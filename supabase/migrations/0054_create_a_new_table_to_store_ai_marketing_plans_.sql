-- Create ai_plans table
CREATE TABLE public.ai_plans (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  creator_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  status TEXT DEFAULT 'draft'::text NOT NULL,
  color TEXT DEFAULT 'bg-purple-100 text-purple-600'::text,
  items_count INT DEFAULT 0 NOT NULL
);

-- Enable RLS
ALTER TABLE public.ai_plans ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Allow team access for AI Plans" ON public.ai_plans
FOR ALL
USING (has_permission('view_ai_plan') OR is_super_admin());

-- Create function to get ai_plans with creator info
CREATE OR REPLACE FUNCTION public.get_ai_plans_with_creator()
RETURNS TABLE(
  id bigint,
  name text,
  updated_at timestamp with time zone,
  creator_id uuid,
  creator_name text,
  creator_email text,
  items_count int,
  color text
)
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT
    p.id,
    p.name,
    p.updated_at,
    p.creator_id,
    u.raw_user_meta_data ->> 'full_name' as creator_name,
    u.email as creator_email,
    p.items_count,
    p.color
  FROM public.ai_plans p
  LEFT JOIN auth.users u ON p.creator_id = u.id
  ORDER BY p.updated_at DESC;
$$;