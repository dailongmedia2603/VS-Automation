-- Kích hoạt extension cho tìm kiếm vector
CREATE EXTENSION IF NOT EXISTS vector;

-- Bảng cài đặt chung
CREATE TABLE IF NOT EXISTS public.ai_settings (
    id BIGINT PRIMARY KEY DEFAULT 1,
    api_url TEXT,
    api_key TEXT,
    embedding_model_name TEXT DEFAULT 'text-embedding-3-small'
);
ALTER TABLE public.ai_settings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage AI settings" ON public.ai_settings FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.n8n_settings (
    id BIGINT PRIMARY KEY DEFAULT 1,
    zalo_webhook_url TEXT
);
ALTER TABLE public.n8n_settings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage n8n settings" ON public.n8n_settings FOR ALL USING (auth.role() = 'authenticated');

-- Bảng cho Chatwoot
CREATE TABLE IF NOT EXISTS public.chatwoot_settings (
    id BIGINT PRIMARY KEY DEFAULT 1,
    chatwoot_url TEXT,
    account_id TEXT,
    inbox_id TEXT,
    api_token TEXT
);
ALTER TABLE public.chatwoot_settings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Chatwoot settings" ON public.chatwoot_settings FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.chatwoot_labels (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    color TEXT DEFAULT '#6B7280'
);
ALTER TABLE public.chatwoot_labels ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Chatwoot labels" ON public.chatwoot_labels FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.auto_reply_settings (
    id BIGINT PRIMARY KEY DEFAULT 1,
    config JSONB
);
ALTER TABLE public.auto_reply_settings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage auto-reply settings" ON public.auto_reply_settings FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.care_script_settings (
    id BIGINT PRIMARY KEY DEFAULT 1,
    config JSONB
);
ALTER TABLE public.care_script_settings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage care script settings" ON public.care_script_settings FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.ai_reply_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    conversation_id BIGINT NOT NULL,
    status TEXT NOT NULL,
    details TEXT,
    system_prompt TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.ai_reply_logs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage AI logs" ON public.ai_reply_logs FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.ai_typing_status (
    conversation_id BIGINT PRIMARY KEY,
    is_typing BOOLEAN DEFAULT FALSE,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.ai_typing_status ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage AI typing status" ON public.ai_typing_status FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.care_scripts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    conversation_id BIGINT NOT NULL,
    contact_id BIGINT,
    content TEXT NOT NULL,
    scheduled_at TIMESTAMPTZ NOT NULL,
    status TEXT NOT NULL DEFAULT 'scheduled',
    image_url TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.care_scripts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage care scripts" ON public.care_scripts FOR ALL USING (auth.role() = 'authenticated');

-- Bảng cho Zalo
CREATE TABLE IF NOT EXISTS public.zalo_labels (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    color TEXT DEFAULT '#6B7280'
);
ALTER TABLE public.zalo_labels ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo labels" ON public.zalo_labels FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.zalo_care_settings (
    id BIGINT PRIMARY KEY DEFAULT 1,
    config JSONB
);
ALTER TABLE public.zalo_care_settings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo care settings" ON public.zalo_care_settings FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.zalo_auto_reply_settings (
    id BIGINT PRIMARY KEY DEFAULT 1,
    config JSONB
);
ALTER TABLE public.zalo_auto_reply_settings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo auto-reply settings" ON public.zalo_auto_reply_settings FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.zalo_ai_reply_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id TEXT NOT NULL,
    log_type TEXT NOT NULL,
    status TEXT NOT NULL,
    details TEXT,
    system_prompt TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.zalo_ai_reply_logs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo AI logs" ON public.zalo_ai_reply_logs FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.zalo_notes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id TEXT NOT NULL,
    user_id UUID REFERENCES auth.users(id),
    user_email TEXT,
    content TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.zalo_notes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo notes" ON public.zalo_notes FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.zalo_user (
    userId TEXT PRIMARY KEY,
    displayName TEXT,
    zaloName TEXT,
    phoneNumber TEXT,
    avatar TEXT,
    gender TEXT
);
ALTER TABLE public.zalo_user ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo users" ON public.zalo_user FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.zalo_care_scripts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id TEXT NOT NULL,
    content TEXT NOT NULL,
    scheduled_at TIMESTAMPTZ NOT NULL,
    status TEXT NOT NULL DEFAULT 'scheduled',
    image_url TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.zalo_care_scripts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo care scripts" ON public.zalo_care_scripts FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.zalo_conversation_seen_status (
    user_id UUID REFERENCES auth.users(id),
    conversation_thread_id TEXT,
    last_seen_at TIMESTAMPTZ,
    PRIMARY KEY (user_id, conversation_thread_id)
);
ALTER TABLE public.zalo_conversation_seen_status ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow users to manage their own seen status" ON public.zalo_conversation_seen_status FOR ALL USING (auth.uid() = user_id);

CREATE TABLE IF NOT EXISTS public.zalo_messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    threadId TEXT,
    message_content TEXT,
    message_image TEXT,
    direction TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.zalo_messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo messages" ON public.zalo_messages FOR ALL USING (auth.role() = 'authenticated');

CREATE TABLE IF NOT EXISTS public.zalo_conversation_labels (
    thread_id TEXT,
    label_id BIGINT REFERENCES public.zalo_labels(id) ON DELETE CASCADE,
    PRIMARY KEY (thread_id, label_id)
);
ALTER TABLE public.zalo_conversation_labels ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage Zalo conversation labels" ON public.zalo_conversation_labels FOR ALL USING (auth.role() = 'authenticated');

-- Bảng cho Huấn luyện & Tài liệu
CREATE TABLE IF NOT EXISTS public.documents (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    purpose TEXT,
    document_type TEXT,
    content TEXT,
    example_customer_message TEXT,
    example_agent_reply TEXT,
    creator_name TEXT,
    embedding vector(1536),
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage documents" ON public.documents FOR ALL USING (auth.role() = 'authenticated');

-- Bảng cho Nhân sự
CREATE TABLE IF NOT EXISTS public.staff (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    role TEXT,
    status TEXT DEFAULT 'active'
);
ALTER TABLE public.staff ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to manage staff" ON public.staff FOR ALL USING (auth.role() = 'authenticated');

-- Hàm RPC
CREATE OR REPLACE FUNCTION match_documents (
  query_embedding vector(1536),
  match_threshold float,
  match_count int
)
RETURNS TABLE (
  id bigint,
  title text,
  purpose text,
  document_type text,
  content text,
  example_customer_message text,
  example_agent_reply text,
  creator_name text,
  similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    documents.id,
    documents.title,
    documents.purpose,
    documents.document_type,
    documents.content,
    documents.example_customer_message,
    documents.example_agent_reply,
    documents.creator_name,
    1 - (documents.embedding <=> query_embedding) AS similarity
  FROM documents
  WHERE 1 - (documents.embedding <=> query_embedding) > match_threshold
  ORDER BY similarity DESC
  LIMIT match_count;
END;
$$;

CREATE OR REPLACE FUNCTION get_zalo_conversations()
RETURNS TABLE(
    "threadId" TEXT,
    name TEXT,
    avatar TEXT,
    "lastMessage" TEXT,
    "lastActivityAt" TIMESTAMPTZ,
    "lastMessageDirection" TEXT,
    labels TEXT[],
    "hasScheduledScript" BOOLEAN
) AS $$
BEGIN
    RETURN QUERY
    WITH last_messages AS (
        SELECT
            "threadId",
            (array_agg(message_content ORDER BY created_at DESC))[1] AS "lastMessage",
            (array_agg(direction ORDER BY created_at DESC))[1] AS "lastMessageDirection",
            MAX(created_at) AS "lastActivityAt"
        FROM zalo_messages
        GROUP BY "threadId"
    ),
    conversation_labels AS (
        SELECT
            cl.thread_id,
            array_agg(l.name) AS labels
        FROM zalo_conversation_labels cl
        JOIN zalo_labels l ON cl.label_id = l.id
        GROUP BY cl.thread_id
    ),
    scheduled_scripts AS (
        SELECT
            thread_id,
            TRUE as "hasScheduledScript"
        FROM zalo_care_scripts
        WHERE status = 'scheduled'
        GROUP BY thread_id
    )
    SELECT
        lm."threadId",
        COALESCE(zu.displayName, zu.zaloName, lm."threadId") AS name,
        zu.avatar,
        lm."lastMessage",
        lm."lastActivityAt",
        lm."lastMessageDirection",
        COALESCE(cl.labels, '{}'::text[]) AS labels,
        COALESCE(ss."hasScheduledScript", FALSE) AS "hasScheduledScript"
    FROM last_messages lm
    LEFT JOIN zalo_user zu ON lm."threadId" = zu.userId
    LEFT JOIN conversation_labels cl ON lm."threadId" = cl.thread_id
    LEFT JOIN scheduled_scripts ss ON lm."threadId" = ss.thread_id
    ORDER BY lm."lastActivityAt" DESC;
END;
$$ LANGUAGE plpgsql;

-- Chèn dữ liệu cài đặt mặc định
INSERT INTO public.ai_settings (id) VALUES (1) ON CONFLICT (id) DO NOTHING;
INSERT INTO public.n8n_settings (id) VALUES (1) ON CONFLICT (id) DO NOTHING;
INSERT INTO public.chatwoot_settings (id) VALUES (1) ON CONFLICT (id) DO NOTHING;
INSERT INTO public.auto_reply_settings (id) VALUES (1) ON CONFLICT (id) DO NOTHING;
INSERT INTO public.care_script_settings (id) VALUES (1) ON CONFLICT (id) DO NOTHING;
INSERT INTO public.zalo_care_settings (id) VALUES (1) ON CONFLICT (id) DO NOTHING;
INSERT INTO public.zalo_auto_reply_settings (id) VALUES (1) ON CONFLICT (id) DO NOTHING;